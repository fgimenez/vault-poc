AWSTemplateFormatVersion: 2010-09-09
Description: Vault as KMS replacement PoC.

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: vault-poc

  VaultInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-c7e0c82c
      InstanceType: t2.micro
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y unzip
            wget https://releases.hashicorp.com/vault/0.10.1/vault_0.10.1_linux_amd64.zip
            unzip vault_0.10.1_linux_amd64.zip -d /usr/local/bin

            export VAULT_DEV_ROOT_TOKEN_ID=root
            export VAULT_TOKEN=root
            export VAULT_ADDR=http://127.0.0.1:8200

            vault server -dev &

            vault secrets enable transit
            vault write -f transit/keys/test
            cat <<EOF > policy.hcl
            path "transit/keys/test" {
              capabilities = ["read"]
            }
            EOF
            vault write sys/policy/test policy=@policy.hcl

            vault auth enable aws
            test_role_payload=$(cat <<EOF
            {
              "auth_type": "ec2",
              "bound_region": "eu-central-1",
              "bound_iam_role_arn": "${AccessRoleARN}"
              "policies": "test",
              "max_ttl": 1800000,
              "disallow_reauthentication": false,
              "allow_instance_migration": false
            }
            EOF
            )
            curl \
              --silent \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$test_role_payload" \
              $VAULT_ADDR/v1/auth/aws/role/test

          - { AccessRoleARN: !GetAtt AccessRole.Arn }
      Tags:
      - Key: Name
        Value: vault-poc-vault

  EncrypterInstance:
    Type: AWS::EC2::Instance
    DependsOn: VaultInstance
    Properties:
      ImageId: ami-c7e0c82c
      InstanceType: t2.micro
      IamInstanceProfile: !Ref AccessInstanceProfile
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y python-pip jq

            export LC_ALL=C
            pip install awscli

            export VAULT_ADDR=http://${VaultIP}

            echo ${VaultIP} | tee /vaultip.txt

            cat << 'SCRIPT' > /usr/local/bin/awsauth.sh
            #!/usr/bin/env bash

            token_path=/var/token
            nonce_path=/var/nonce

            # if curl pkcs7 fails, exit with error logged
            token_exists () {
              if [ -f $token_path ]; then
                return 0
              else
                return 1
              fi
            }

            token_is_valid() {
              #  https://www.vaultproject.io/api/auth/token/index.html#lookup-a-token-self-
              echo "Checking token validity"
              token_lookup=$(curl \
                --request GET \
                --header "X-Vault-Token: $(cat $token_path)" \
                --write-out %{http_code} \
                --silent \
                --output /dev/null \
                http://${VaultIP}:8200/v1/auth/token/lookup-self)
              if [ "$token_lookup" == "200" ]; then
                echo "$0 - Valid token found, exiting"
                return 0
              else
                echo "$0 - Invalid token found"
                return 1
              fi
            }

            main () {
              if ! token_exists; then
                aws_login ""
              elif token_exists && ! token_is_valid; then
                aws_login "$(cat $nonce_path)"
              else
                logger $0 "current vault token is still valid"
                exit 0
              fi
            }

            aws_login () {
              pkcs7=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')
              if [ -z "$1" ]; then
                # do not load nonce if initial login
                login_payload=$(cat <<EOF
            {
              "role": "test",
              "pkcs7": "$pkcs7"
            }
            EOF
              )
              else
                # load nonce in payload for reauthentication
                login_payload=$(cat <<EOF
            {
              "role": "test",
              "pkcs7": "$pkcs7",
              "nonce": "$1"
            }
            EOF
              )
              fi

              curl \
                --silent \
                --request POST \
                --data "$login_payload" \
                http://${VaultIP}:8200/v1/auth/aws/login | tee \
                >(jq -r .auth.client_token > $token_path) \
                >(jq -r .auth.metadata.nonce > $nonce_path)
            }

            main
            SCRIPT

          - { VaultIP: !GetAtt VaultInstance.PrivateIp }

      Tags:
      - Key: Name
        Value: vault-poc-encrypter

  DecrypterInstance:
    Type: AWS::EC2::Instance
    DependsOn: EncrypterInstance
    Properties:
      ImageId: ami-c7e0c82c
      InstanceType: t2.micro
      IamInstanceProfile: !Ref AccessInstanceProfile
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y python-pip jq

            export LC_ALL=C
            pip install awscli

            export VAULT_ADDR=http://${VaultIP}

            echo ${VaultIP} | tee /vaultip.txt

            cat << 'SCRIPT' > /usr/local/bin/awsauth.sh
            #!/usr/bin/env bash

            token_path=/var/token
            nonce_path=/var/nonce

            # if curl pkcs7 fails, exit with error logged
            token_exists () {
              if [ -f $token_path ]; then
                return 0
              else
                return 1
              fi
            }

            token_is_valid() {
              #  https://www.vaultproject.io/api/auth/token/index.html#lookup-a-token-self-
              echo "Checking token validity"
              token_lookup=$(curl \
                --request GET \
                --header "X-Vault-Token: $(cat $token_path)" \
                --write-out %{http_code} \
                --silent \
                --output /dev/null \
                http://${VaultIP}:8200/v1/auth/token/lookup-self)
              if [ "$token_lookup" == "200" ]; then
                echo "$0 - Valid token found, exiting"
                return 0
              else
                echo "$0 - Invalid token found"
                return 1
              fi
            }

            main () {
              if ! token_exists; then
                aws_login ""
              elif token_exists && ! token_is_valid; then
                aws_login "$(cat $nonce_path)"
              else
                logger $0 "current vault token is still valid"
                exit 0
              fi
            }

            aws_login () {
              pkcs7=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')
              if [ -z "$1" ]; then
                # do not load nonce if initial login
                login_payload=$(cat <<EOF
            {
              "role": "test",
              "pkcs7": "$pkcs7"
            }
            EOF
              )
              else
                # load nonce in payload for reauthentication
                login_payload=$(cat <<EOF
            {
              "role": "test",
              "pkcs7": "$pkcs7",
              "nonce": "$1"
            }
            EOF
              )
              fi

              curl \
                --silent \
                --request POST \
                --data "$login_payload" \
                http://${VaultIP}:8200/v1/auth/aws/login | tee \
                >(jq -r .auth.client_token > $token_path) \
                >(jq -r .auth.metadata.nonce > $nonce_path)
            }

            main
            SCRIPT

          - { VaultIP: !GetAtt VaultInstance.PrivateIp }

      Tags:
      - Key: Name
        Value: vault-poc-decrypter

  SecretS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vault-poc-secret

  AccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: vault-poc-secret-access
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action: "sts:AssumeRole"

  AccessInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: vault-poc-secret-access
      Roles:
        - Ref: AccessRole

  AccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: vault-poc-secret-access
      Roles:
        - Ref: AccessRole
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: "arn:aws:s3:::vault-poc-secret/*"

          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DescribeInstanceAttribute"
              - "ec2:DescribeInstanceStatus"
              - "ec2:DescribeInstances"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeTags"
            Resource: "*"
