AWSTemplateFormatVersion: 2010-09-09
Description: Vault as KMS replacement PoC.

Parameters:
  AccessKey:
    Type: String
  SecretKeyId:
    Type: String

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: vault-poc

  VaultInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-4f508c22
      InstanceType: t2.micro
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y unzip jq
            wget https://releases.hashicorp.com/vault/0.10.1/vault_0.10.1_linux_amd64.zip
            unzip vault_0.10.1_linux_amd64.zip -d /usr/local/bin

            export VAULT_ADDR=http://127.0.0.1:8200

            cat << 'SCRIPT' > /usr/local/bin/vaultinit.sh
            #!/usr/bin/env bash

            ################
            # Vault generic setup
            ################
            cat <<EOF > config.hcl
            storage "inmem" {}
            listener "tcp" {
              address = "0.0.0.0:8200"
              tls_disable = 1
            }
            disable_mlock = true
            EOF
            vault server -config=config.hcl 2>&1 > /var/log/vault.txt &
            sleep 3

            curl \
              --silent \
              --request PUT \
              --data '{"secret_shares": 1, "secret_threshold": 1}' \
              $VAULT_ADDR/v1/sys/init | tee >(jq -r .root_token > /tmp/root_token) >(jq -r .keys[0] > /tmp/key)

            key=$(cat /tmp/key)
            curl \
              --silent \
              --request PUT \
              --data '{"key": "'"$key"'"}' \
              $VAULT_ADDR/v1/sys/unseal

            export VAULT_TOKEN=$(cat /tmp/root_token)
            ################
            # End of Vault generic setup
            ################

            ################
            # Transist secrets backend
            ################
            vault secrets enable transit
            ################
            # End of transist secrets backend
            ################

            ################
            # Policies
            ################
            cat <<EOF > transit-policy.hcl
            path "transit/*" {
              capabilities = ["create", "read", "update", "delete", "list"]
            }
            EOF
            vault write sys/policy/transit policy=@transit-policy.hcl

            cat <<EOF > auth-aws-role-admin-policy.hcl
            path "auth/aws/role/*" {
              capabilities = ["create", "read", "update", "delete", "list"]
            }
            EOF
            vault write sys/policy/auth-aws-role-admin policy=@auth-aws-role-admin-policy.hcl
            ################
            # End of Policies
            ################

            ################
            # AWS auth backend
            ################
            vault auth enable aws

            # We need to specify endpoint, iam_endpoint and sts_endpoint because of China, regular regions use defaults
            client_cfg_payload=$(cat <<EOF
            {
              "access_key": "${AccessKey}",
              "secret_key": "${SecretKeyId}",
              "endpoint": "ec2.cn-north-1.amazonaws.com.cn",
              "iam_endpoint": "iam.cn-north-1.amazonaws.com.cn",
              "sts_endpoint": "sts.cn-north-1.amazonaws.com.cn"
            }
            EOF
            )
            curl \
              --silent \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$client_cfg_payload" \
              $VAULT_ADDR/v1/auth/aws/config/client

            # this certificate specific for China region comes from http://docs.amazonaws.cn/en_us/AWSEC2/latest/UserGuide/instance-identity-documents.html
            certificate_cfg_payload=$(cat <<EOF
            {
              "aws_public_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlETmpDQ0FoNENDUUQzeVoxdzFBVmtUekFOQmdrcWhraUc5dzBCQVFzRkFEQmNNUXN3Q1FZRFZRUUdFd0pWDQpVekVaTUJjR0ExVUVDQk1RVjJGemFHbHVaM1J2YmlCVGRHRjBaVEVRTUE0R0ExVUVCeE1IVTJWaGRIUnNaVEVnDQpNQjRHQTFVRUNoTVhRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeUJNVEVNd0lCY05NVFV3TlRFek1EazFPVEUxDQpXaGdQTWpFNU5ERXdNVFl3T1RVNU1UVmFNRnd4Q3pBSkJnTlZCQVlUQWxWVE1Sa3dGd1lEVlFRSUV4QlhZWE5vDQphVzVuZEc5dUlGTjBZWFJsTVJBd0RnWURWUVFIRXdkVFpXRjBkR3hsTVNBd0hnWURWUVFLRXhkQmJXRjZiMjRnDQpWMlZpSUZObGNuWnBZMlZ6SUV4TVF6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCDQpBTVdrOXZ5cHBTbURVM0F4WjJDeTJidktlSzNGMVVxTnBNdXllcmlpemkrTlRzWjh0UXF0TmxvYVFjcWh0by9sDQpnc3c5K1FTbkVKZVlXbm1pdkpXT0JkbjlDeURwTjdjcEhWbWVHZ05KTDJmdkltV3lXZTJmMktxL0JMOWw3TjdDDQpQMlpUNTIvc0g5b3JsY2sxbjJ6Tzh4UGk3TUl0Z1BIUXd1M094c0dRc0FkV3VjZHhqSEd0ZGNodWxwbzF1SjMxDQpqc1RBUEtaM3AxL3N4UFhCQkFnQk1hdFBIaFJCcWh3SE8vVHdtNEozR21UTFdON29WRGRzNFczYlBLUWZudzNyDQp2dEJqL1NNNC9JZ1EzeEpzbEZjbDkwVFpiUWJneElpODhSL2dXVGJzN0dzeVQyUHpzdFUzMHlMZEpoS2ZkWkt6DQovYUl6cmFIdm9EVFdGYU9keTArT09hRUNBd0VBQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWRTek4yKzBFDQpWMUJmUjNEUFdKSFdSZjFiN3psKzFYL1pzZVcyaFlFNXI2WXhyTHYrMVZQZi9MNUk2a0I3R0V0cWhaVXF0ZVk3DQp6QWNlb0xyVnUvN095blJ5ZlFldEpWR2ljaGFheExOTTNsY3I2a2N4T293YitXUVE4NGN3ckIza2V5a0g0Z1JYDQpLSEIycmxXU3h0YSsycGFuU0VPMUpYMnE1amhjRlA5MHJET3RaamxwWXY1N04vWjlpUStkdlFQSm5DaGRxM0JLDQo1cFpsbklEblZWeHFSaWtlN0JGeTh0S3lQajdIem9QRUY1bWg5S2ZubjFZb1NWdSs2MWxNVnYvcVJqbnlLZlM5DQpjOTZuRTk4c1lGajBaVkJ6WHc4U3E0R2g4RmlWbUZIYlFwMXBlR0MxOWlkT1VxeFB4V3Nhc1d4UVhPMGF6WXNQDQo5UnlXTEhLeEgxZE11QT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            }
            EOF
            )
            curl \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$certificate_cfg_payload" \
              $VAULT_ADDR/v1/auth/aws/config/certificate/aws-cn
            ################
            # End of AWS auth backend
            ################

            ################
            # AWS auth roles
            ################
            encrypter_role_payload=$(cat <<EOF
            {
              "auth_type": "ec2",
              "bound_region": "cn-north-1",
              "bound_iam_role_arn": "${EncrypterAccessRoleARN}",
              "policies": "aws-auth-admin,transit",
              "max_ttl": 1800000,
              "disallow_reauthentication": false,
              "allow_instance_migration": false
            }
            EOF
            )
            curl \
              --silent \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$encrypter_role_payload" \
              $VAULT_ADDR/v1/auth/aws/role/encrypter

            decrypter_role_payload=$(cat <<EOF
            {
              "auth_type": "ec2",
              "bound_region": "cn-north-1",
              "bound_iam_role_arn": "",
              "policies": "transit",
              "max_ttl": 1800000,
              "disallow_reauthentication": false,
              "allow_instance_migration": false
            }
            EOF
            )
            curl \
              --silent \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$decrypter_role_payload" \
              $VAULT_ADDR/v1/auth/aws/role/decrypter
            ################
            # End of AWS auth roles
            ################

            SCRIPT

            chmod a+x /usr/local/bin/vaultinit.sh

            vaultinit.sh


          - { EncrypterAccessRoleARN: !GetAtt EncrypterAccessRole.Arn }
      Tags:
      - Key: Name
        Value: vault-poc-vault

  EncrypterInstance:
    Type: AWS::EC2::Instance
    DependsOn: VaultInstance
    Properties:
      ImageId: ami-4f508c22
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EncrypterAccessInstanceProfile
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y python-pip jq unzip

            wget https://releases.hashicorp.com/vault/0.10.1/vault_0.10.1_linux_amd64.zip
            unzip vault_0.10.1_linux_amd64.zip -d /usr/local/bin

            export LC_ALL=C
            pip install awscli

            export VAULT_ADDR=http://${VaultIP}

            echo ${VaultIP} | tee /vaultip.txt

            cat << 'SCRIPT' > /usr/local/bin/awsauth.sh
            #!/usr/bin/env bash

            token_path=/var/token
            nonce_path=/var/nonce

            # if curl pkcs7 fails, exit with error logged
            token_exists () {
              if [ -f $token_path ]; then
                return 0
              else
                return 1
              fi
            }

            token_is_valid() {
              #  https://www.vaultproject.io/api/auth/token/index.html#lookup-a-token-self-
              echo "Checking token validity"
              token_lookup=$(curl \
                --request GET \
                --header "X-Vault-Token: $(cat $token_path)" \
                --write-out %{http_code} \
                --silent \
                --output /dev/null \
                http://${VaultIP}:8200/v1/auth/token/lookup-self)
              if [ "$token_lookup" == "200" ]; then
                echo "$0 - Valid token found, exiting"
                return 0
              else
                echo "$0 - Invalid token found"
                return 1
              fi
            }

            main () {
              if ! token_exists; then
                aws_login ""
              elif token_exists && ! token_is_valid; then
                aws_login "$(cat $nonce_path)"
              else
                logger $0 "current vault token is still valid"
                exit 0
              fi
            }

            aws_login () {
              pkcs7=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')
              if [ -z "$1" ]; then
                # do not load nonce if initial login
                login_payload=$(cat <<EOF
            {
              "role": "encrypter",
              "pkcs7": "$pkcs7"
            }
            EOF
              )
              else
                # load nonce in payload for reauthentication
                login_payload=$(cat <<EOF
            {
              "role": "encrypter",
              "pkcs7": "$pkcs7",
              "nonce": "$1"
            }
            EOF
              )
              fi

              curl \
                --silent \
                --request POST \
                --data "$login_payload" \
                http://${VaultIP}:8200/v1/auth/aws/login | tee \
                >(jq -r .auth.client_token > $token_path) \
                >(jq -r .auth.metadata.nonce > $nonce_path)
            }

            main
            SCRIPT

            chmod a+x /usr/local/bin/awsauth.sh

            awsauth.sh

            vault write -f transit/keys/test

            decrypter_role_payload=$(cat <<EOF
            {
              "auth_type": "ec2",
              "bound_region": "cn-north-1",
              "bound_iam_role_arn": "${DecrypterRoleArn}",
              "policies": "transit",
              "max_ttl": 1800000,
              "disallow_reauthentication": false,
              "allow_instance_migration": false
            }
            EOF
            )
            curl \
              --silent \
              --header "X-Vault-Token: $VAULT_TOKEN" \
              --request POST \
              --data "$decrypter_role_payload" \
              $VAULT_ADDR/v1/auth/aws/role/decrypter


          - { VaultIP: !GetAtt VaultInstance.PrivateIp,
              DecrypterRoleArn: !GetAtt DecrypterAccessRole.Arn }

      Tags:
      - Key: Name
        Value: vault-poc-encrypter

  DecrypterInstance:
    Type: AWS::EC2::Instance
    DependsOn: EncrypterInstance
    Properties:
      ImageId: ami-4f508c22
      InstanceType: t2.micro
      IamInstanceProfile: !Ref DecrypterAccessInstanceProfile
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y python-pip jq unzip

            wget https://releases.hashicorp.com/vault/0.10.1/vault_0.10.1_linux_amd64.zip
            unzip vault_0.10.1_linux_amd64.zip -d /usr/local/bin

            export LC_ALL=C
            pip install awscli

            export VAULT_ADDR=http://${VaultIP}

            echo ${VaultIP} | tee /vaultip.txt

            cat << 'SCRIPT' > /usr/local/bin/awsauth.sh
            #!/usr/bin/env bash

            token_path=/var/token
            nonce_path=/var/nonce

            # if curl pkcs7 fails, exit with error logged
            token_exists () {
              if [ -f $token_path ]; then
                return 0
              else
                return 1
              fi
            }

            token_is_valid() {
              #  https://www.vaultproject.io/api/auth/token/index.html#lookup-a-token-self-
              echo "Checking token validity"
              token_lookup=$(curl \
                --request GET \
                --header "X-Vault-Token: $(cat $token_path)" \
                --write-out %{http_code} \
                --silent \
                --output /dev/null \
                http://${VaultIP}:8200/v1/auth/token/lookup-self)
              if [ "$token_lookup" == "200" ]; then
                echo "$0 - Valid token found, exiting"
                return 0
              else
                echo "$0 - Invalid token found"
                return 1
              fi
            }

            main () {
              if ! token_exists; then
                aws_login ""
              elif token_exists && ! token_is_valid; then
                aws_login "$(cat $nonce_path)"
              else
                logger $0 "current vault token is still valid"
                exit 0
              fi
            }

            aws_login () {
              pkcs7=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')
              if [ -z "$1" ]; then
                # do not load nonce if initial login
                login_payload=$(cat <<EOF
            {
              "role": "decrypter",
              "pkcs7": "$pkcs7"
            }
            EOF
              )
              else
                # load nonce in payload for reauthentication
                login_payload=$(cat <<EOF
            {
              "role": "decrypter",
              "pkcs7": "$pkcs7",
              "nonce": "$1"
            }
            EOF
              )
              fi

              curl \
                --silent \
                --request POST \
                --data "$login_payload" \
                http://${VaultIP}:8200/v1/auth/aws/login | tee \
                >(jq -r .auth.client_token > $token_path) \
                >(jq -r .auth.metadata.nonce > $nonce_path)
            }

            main
            SCRIPT

            chmod a+x /usr/local/bin/awsauth.sh

            awsauth.sh


          - { VaultIP: !GetAtt VaultInstance.PrivateIp }

      Tags:
      - Key: Name
        Value: vault-poc-decrypter

  NonAuthorizedInstance:
    Type: AWS::EC2::Instance
    DependsOn: EncrypterInstance
    Properties:
      ImageId: ami-4f508c22
      InstanceType: t2.micro
      KeyName: vault-poc
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            apt update && apt install -y python-pip jq unzip

            wget https://releases.hashicorp.com/vault/0.10.1/vault_0.10.1_linux_amd64.zip
            unzip vault_0.10.1_linux_amd64.zip -d /usr/local/bin

            export LC_ALL=C
            pip install awscli

            export VAULT_ADDR=http://${VaultIP}

            echo ${VaultIP} | tee /vaultip.txt

            cat << 'SCRIPT' > /usr/local/bin/awsauth.sh
            #!/usr/bin/env bash

            token_path=/var/token
            nonce_path=/var/nonce

            # if curl pkcs7 fails, exit with error logged
            token_exists () {
              if [ -f $token_path ]; then
                return 0
              else
                return 1
              fi
            }

            token_is_valid() {
              #  https://www.vaultproject.io/api/auth/token/index.html#lookup-a-token-self-
              echo "Checking token validity"
              token_lookup=$(curl \
                --request GET \
                --header "X-Vault-Token: $(cat $token_path)" \
                --write-out %{http_code} \
                --silent \
                --output /dev/null \
                http://${VaultIP}:8200/v1/auth/token/lookup-self)
              if [ "$token_lookup" == "200" ]; then
                echo "$0 - Valid token found, exiting"
                return 0
              else
                echo "$0 - Invalid token found"
                return 1
              fi
            }

            main () {
              if ! token_exists; then
                aws_login ""
              elif token_exists && ! token_is_valid; then
                aws_login "$(cat $nonce_path)"
              else
                logger $0 "current vault token is still valid"
                exit 0
              fi
            }

            aws_login () {
              pkcs7=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')
              if [ -z "$1" ]; then
                # do not load nonce if initial login
                login_payload=$(cat <<EOF
            {
              "role": "decrypter",
              "pkcs7": "$pkcs7"
            }
            EOF
              )
              else
                # load nonce in payload for reauthentication
                login_payload=$(cat <<EOF
            {
              "role": "decrypter",
              "pkcs7": "$pkcs7",
              "nonce": "$1"
            }
            EOF
              )
              fi

              curl \
                --silent \
                --request POST \
                --data "$login_payload" \
                http://${VaultIP}:8200/v1/auth/aws/login | tee \
                >(jq -r .auth.client_token > $token_path) \
                >(jq -r .auth.metadata.nonce > $nonce_path)
            }

            main
            SCRIPT

            chmod a+x /usr/local/bin/awsauth.sh

            awsauth.sh

          - { VaultIP: !GetAtt VaultInstance.PrivateIp }

      Tags:
      - Key: Name
        Value: vault-poc-nonauthorized

  SecretS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vault-poc-secret

  EncrypterAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: vault-poc-secret-access-encrypt
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com.cn"
          Action: "sts:AssumeRole"

  EncrypterAccessInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: vault-poc-secret-access-encrypt
      Roles:
        - Ref: EncrypterAccessRole

  EncrypterAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: vault-poc-secret-access-encrypt
      Roles:
        - Ref: EncrypterAccessRole
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: "arn:*:s3:::vault-poc-secret/*"

          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DescribeInstanceAttribute"
              - "ec2:DescribeInstanceStatus"
              - "ec2:DescribeInstances"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeTags"
            Resource: "*"

  DecrypterAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: vault-poc-secret-access-decrypt
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com.cn"
          Action: "sts:AssumeRole"

  DecrypterAccessInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: vault-poc-secret-access-decrypt
      Roles:
        - Ref: DecrypterAccessRole

  DecrypterAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: vault-poc-secret-access-decrypt
      Roles:
        - Ref: DecrypterAccessRole
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: "arn:*:s3:::vault-poc-secret/*"

          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DescribeInstanceAttribute"
              - "ec2:DescribeInstanceStatus"
              - "ec2:DescribeInstances"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeTags"
            Resource: "*"
